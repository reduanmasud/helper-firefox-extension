name: 🚀 Build and Release QA Tools

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  EXTENSION_NAME: 'qa-tools'

jobs:
  # Lint and Test Job
  lint-and-test:
    name: 🔍 Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🔍 Run ESLint
      run: npm run lint
      continue-on-error: true
      
    - name: 🧪 Run tests (if available)
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No tests found, skipping..."
        fi
      continue-on-error: true

  # Build Job
  build:
    name: 🔨 Build Extension
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build bundles
      run: npm run build:bundles
      
    - name: 📦 Build extension
      id: build
      run: |
        npm run build
        
        # Get the built file name
        BUILT_FILE=$(ls dist/*.zip | head -n 1)
        ARTIFACT_NAME=$(basename "$BUILT_FILE")
        
        echo "Built file: $BUILT_FILE"
        echo "artifact-name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        
        # Verify the build
        if [ ! -f "$BUILT_FILE" ]; then
          echo "❌ Build failed - no zip file found"
          exit 1
        fi
        
        echo "✅ Build successful: $ARTIFACT_NAME"
      
    - name: 🏷️ Get version
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(node -p "require('./package.json').version")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
      
    - name: 📤 Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.EXTENSION_NAME }}-${{ steps.get_version.outputs.version }}
        path: dist/*.zip
        retention-days: 30

  # Security Scan Job
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🔒 Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: 🔍 Check for vulnerabilities
      run: |
        echo "🔍 Checking for known vulnerabilities..."
        npm audit --json > audit-results.json || true
        
        # Check if there are any high or critical vulnerabilities
        HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
        CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
        
        echo "High vulnerabilities: $HIGH_VULNS"
        echo "Critical vulnerabilities: $CRITICAL_VULNS"
        
        if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
          echo "⚠️ High or critical vulnerabilities found!"
          echo "Please review and fix before release."
        else
          echo "✅ No high or critical vulnerabilities found."
        fi

  # Release Job (only on tags)
  release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.EXTENSION_NAME }}-${{ needs.build.outputs.version }}
        path: ./release-assets
        
    - name: 📝 Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.build.outputs.version }}"
        
        cat > release-notes.md << EOF
        # 🚀 QA Tools v${VERSION}
        
        ## 📦 What's New
        
        This release includes the latest features and improvements for QA Tools.
        
        ## 🔧 Installation
        
        ### Firefox Add-ons Store (Recommended)
        - Visit the [Firefox Add-ons Store](https://addons.mozilla.org/)
        - Search for "QA Tools"
        - Click "Add to Firefox"
        
        ### Manual Installation
        1. Download the \`${{ needs.build.outputs.artifact-name }}\` file below
        2. Open Firefox and navigate to \`about:debugging\`
        3. Click "This Firefox" → "Load Temporary Add-on..."
        4. Select the downloaded ZIP file
        
        ## 🎯 For Test Engineers
        
        This extension is specifically designed for:
        - ✅ Test automation workflows
        - ✅ Element inspection and locator generation
        - ✅ JavaScript script management
        - ✅ AI-powered content analysis
        - ✅ Playwright integration
        
        ## 📋 System Requirements
        
        - Firefox 78 or higher
        - 4GB RAM (recommended)
        - 50MB free storage space
        
        ## 🆘 Support
        
        - 📖 [Documentation](https://github.com/reduanmasud/qa-tools#readme)
        - 🐛 [Report Issues](https://github.com/reduanmasud/qa-tools/issues)
        - 💬 [Discussions](https://github.com/reduanmasud/qa-tools/discussions)
        
        ---
        
        **Built with ❤️ by [MD. REDUAN MASUD](https://github.com/reduanmasud)**  
        *Software Test Engineer @ Startise in xCloud*
        EOF
        
        echo "Generated release notes for version $VERSION"
        
    - name: 🎉 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: ScriptForge Inspector v${{ needs.build.outputs.version }}
        body_path: release-notes.md
        files: |
          ./release-assets/*.zip
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Firefox Add-ons Store Submission (Optional)
  firefox-addon-submission:
    name: 🦊 Submit to Firefox Add-ons Store
    runs-on: ubuntu-latest
    needs: [build, release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')
    
    steps:
    - name: 📥 Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.EXTENSION_NAME }}-${{ needs.build.outputs.version }}
        path: ./addon-submission
        
    - name: 🦊 Submit to Firefox Add-ons Store
      run: |
        echo "🦊 Firefox Add-ons Store submission would happen here"
        echo "📦 Artifact: ${{ needs.build.outputs.artifact-name }}"
        echo "🏷️ Version: ${{ needs.build.outputs.version }}"
        
        # Note: Actual submission requires:
        # 1. Firefox Add-ons API credentials stored in GitHub Secrets
        # 2. web-ext sign command with proper authentication
        # 3. Extension ID from Mozilla
        
        # Example command (uncomment when ready):
        # npx web-ext sign \
        #   --source-dir=./addon-submission \
        #   --api-key=${{ secrets.FIREFOX_API_KEY }} \
        #   --api-secret=${{ secrets.FIREFOX_API_SECRET }}
        
        echo "⚠️ Automatic submission not configured yet"
        echo "📋 Manual submission required at https://addons.mozilla.org/developers/"

  # Notification Job
  notify:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [build, release]
    if: always() && (needs.build.result == 'success' || needs.release.result == 'success')
    
    steps:
    - name: 📢 Success Notification
      run: |
        echo "🎉 ScriptForge Inspector build completed successfully!"
        echo "📦 Version: ${{ needs.build.outputs.version }}"
        echo "🏷️ Artifact: ${{ needs.build.outputs.artifact-name }}"
        
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          echo "🚀 Release created successfully!"
          echo "🔗 Check releases: https://github.com/${{ github.repository }}/releases"
        else
          echo "✅ Build verification completed!"
        fi
