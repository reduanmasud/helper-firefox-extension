name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Code Quality Job
  code-quality:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🔍 Run ESLint
      run: |
        echo "🔍 Running ESLint..."
        npm run lint || echo "⚠️ Linting issues found"
        
    - name: 📊 Code complexity analysis
      run: |
        echo "📊 Analyzing code complexity..."
        # Add complexity analysis tools here if needed
        find . -name "*.js" -not -path "./node_modules/*" -not -path "./dist/*" | wc -l | xargs echo "JavaScript files:"
        
    - name: 📏 Check file sizes
      run: |
        echo "📏 Checking file sizes..."
        find . -name "*.js" -not -path "./node_modules/*" -not -path "./dist/*" -exec wc -l {} + | sort -n
        
  # Build Verification Job
  build-verification:
    name: 🔨 Build Verification
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build bundles
      run: |
        echo "🏗️ Building bundles with Node.js ${{ matrix.node-version }}..."
        npm run build:bundles
        
    - name: 📦 Build extension
      run: |
        echo "📦 Building extension..."
        npm run build
        
    - name: ✅ Verify build output
      run: |
        echo "✅ Verifying build output..."
        
        # Check if dist directory exists
        if [ ! -d "dist" ]; then
          echo "❌ dist directory not found"
          exit 1
        fi
        
        # Check if zip file exists
        if [ ! -f dist/*.zip ]; then
          echo "❌ Extension zip file not found"
          exit 1
        fi
        
        # Check bundle files
        if [ ! -f "sidebar/markdown-renderer.bundle.js" ]; then
          echo "❌ Markdown renderer bundle not found"
          exit 1
        fi
        
        if [ ! -f "editor/codemirror.bundle.js" ]; then
          echo "❌ CodeMirror bundle not found"
          exit 1
        fi
        
        echo "✅ All build artifacts verified successfully"
        
    - name: 📊 Build size analysis
      run: |
        echo "📊 Build size analysis:"
        echo "Extension package:"
        ls -lh dist/*.zip
        echo ""
        echo "Bundle sizes:"
        ls -lh sidebar/markdown-renderer.bundle.js editor/codemirror.bundle.js
        
  # Extension Validation Job
  extension-validation:
    name: 🦊 Extension Validation
    runs-on: ubuntu-latest
    needs: build-verification
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build extension
      run: |
        npm run build:bundles
        npm run build
        
    - name: 🦊 Validate with web-ext
      run: |
        echo "🦊 Validating extension with web-ext..."
        npx web-ext lint --source-dir=. --config=web-ext-config.cjs || echo "⚠️ Validation warnings found"
        
    - name: 📋 Manifest validation
      run: |
        echo "📋 Validating manifest.json..."
        
        # Check if manifest.json exists and is valid JSON
        if ! jq empty manifest.json; then
          echo "❌ manifest.json is not valid JSON"
          exit 1
        fi
        
        # Check required fields
        REQUIRED_FIELDS=("manifest_version" "name" "version" "description")
        for field in "${REQUIRED_FIELDS[@]}"; do
          if ! jq -e ".$field" manifest.json > /dev/null; then
            echo "❌ Required field '$field' missing from manifest.json"
            exit 1
          fi
        done
        
        echo "✅ Manifest validation passed"
        
    - name: 🔍 Security check
      run: |
        echo "🔍 Running security checks..."
        
        # Check for potentially dangerous permissions
        DANGEROUS_PERMS=("tabs" "<all_urls>")
        for perm in "${DANGEROUS_PERMS[@]}"; do
          if jq -e ".permissions[]? | select(. == \"$perm\")" manifest.json > /dev/null; then
            echo "⚠️ Potentially sensitive permission found: $perm"
          fi
        done
        
        # Check for eval usage (security risk)
        if grep -r "eval(" --include="*.js" . --exclude-dir=node_modules --exclude-dir=dist; then
          echo "⚠️ eval() usage found - potential security risk"
        else
          echo "✅ No eval() usage found"
        fi
        
  # Documentation Check Job
  documentation-check:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📚 Check documentation files
      run: |
        echo "📚 Checking documentation files..."
        
        REQUIRED_DOCS=("README.md" "LICENSE" "INSTALLATION.md")
        for doc in "${REQUIRED_DOCS[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "❌ Required documentation file missing: $doc"
            exit 1
          else
            echo "✅ Found: $doc"
          fi
        done
        
    - name: 📝 Check README completeness
      run: |
        echo "📝 Checking README completeness..."
        
        REQUIRED_SECTIONS=("Installation" "Features" "Usage" "Author")
        for section in "${REQUIRED_SECTIONS[@]}"; do
          if ! grep -i "## $section\|# $section" README.md > /dev/null; then
            echo "⚠️ README section might be missing: $section"
          else
            echo "✅ Found section: $section"
          fi
        done
        
  # Performance Check Job
  performance-check:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    needs: build-verification
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build extension
      run: |
        npm run build:bundles
        npm run build
        
    - name: ⚡ Performance analysis
      run: |
        echo "⚡ Analyzing extension performance..."
        
        # Check bundle sizes
        echo "📦 Bundle size analysis:"
        MARKDOWN_SIZE=$(stat -f%z sidebar/markdown-renderer.bundle.js 2>/dev/null || stat -c%s sidebar/markdown-renderer.bundle.js)
        CODEMIRROR_SIZE=$(stat -f%z editor/codemirror.bundle.js 2>/dev/null || stat -c%s editor/codemirror.bundle.js)
        TOTAL_SIZE=$(stat -f%z dist/*.zip 2>/dev/null || stat -c%s dist/*.zip)
        
        echo "Markdown renderer bundle: $(($MARKDOWN_SIZE / 1024))KB"
        echo "CodeMirror bundle: $(($CODEMIRROR_SIZE / 1024))KB"
        echo "Total extension size: $(($TOTAL_SIZE / 1024))KB"
        
        # Warn if bundles are too large
        if [ $MARKDOWN_SIZE -gt 500000 ]; then
          echo "⚠️ Markdown renderer bundle is large (>500KB)"
        fi
        
        if [ $CODEMIRROR_SIZE -gt 1000000 ]; then
          echo "⚠️ CodeMirror bundle is large (>1MB)"
        fi
        
        if [ $TOTAL_SIZE -gt 5000000 ]; then
          echo "⚠️ Extension package is large (>5MB)"
        fi
        
  # Summary Job
  ci-summary:
    name: 📊 CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, build-verification, extension-validation, documentation-check, performance-check]
    if: always()
    
    steps:
    - name: 📊 Generate CI Summary
      run: |
        echo "📊 ScriptForge Inspector CI Summary"
        echo "=================================="
        echo ""
        echo "🔍 Code Quality: ${{ needs.code-quality.result }}"
        echo "🔨 Build Verification: ${{ needs.build-verification.result }}"
        echo "🦊 Extension Validation: ${{ needs.extension-validation.result }}"
        echo "📚 Documentation Check: ${{ needs.documentation-check.result }}"
        echo "⚡ Performance Check: ${{ needs.performance-check.result }}"
        echo ""
        
        # Determine overall status
        if [[ "${{ needs.code-quality.result }}" == "success" && 
              "${{ needs.build-verification.result }}" == "success" && 
              "${{ needs.extension-validation.result }}" == "success" && 
              "${{ needs.documentation-check.result }}" == "success" && 
              "${{ needs.performance-check.result }}" == "success" ]]; then
          echo "🎉 All CI checks passed successfully!"
          echo "✅ ScriptForge Inspector is ready for deployment"
        else
          echo "❌ Some CI checks failed"
          echo "🔧 Please review and fix the issues above"
        fi
        
        echo ""
        echo "📋 Next Steps:"
        echo "- Review any warnings or failures above"
        echo "- Fix issues and push changes"
        echo "- Create a release tag to trigger deployment"
